generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Residuos {
  id              Int              @id @default(autoincrement())
  tipoResiduo     String
  descricao       String
  quantidade      Float
  unidade         String
  condicoes       String
  disponibilidade String
  preco           String?
  empresaId       Int
  userId          String
  imagens         ImagemResiduos[]
  propostas       Propostas[]
  empresa         Empresas         @relation(fields: [empresaId], references: [id])

  @@map("residuos")
}

model ImagemResiduos {
  id        Int      @id @default(autoincrement())
  url       String
  residuoId Int
  residuo   Residuos @relation(fields: [residuoId], references: [id])

  @@map("imagens_residuos")
}

model Empresas {
  id                 Int            @id @default(autoincrement())
  nome               String
  email              String         @unique
  telefone           String
  password           String
  cnpj               String         @unique
  rua                String
  numero             String
  cep                String
  cidade             String
  estado             String
  pais               String
  aceiteTermos       Boolean
  aceitePrivacidade  Boolean
  chatLastSeen       ChatLastSeen[]
  chatMessages       ChatMessage[]  @relation("EmpresaChatMessages")
  notificacoes       Notificacoes[]
  propostasEnviadas  Propostas[]    @relation("EmpresaProponente")
  propostasRecebidas Propostas[]    @relation("EmpresaReceptora")
  residuos           Residuos[]

  @@map("empresas")
}

model Propostas {
  id                  Int            @id @default(autoincrement())
  quantidade          String
  frequencia          String
  preco               String?
  mensagem            String?
  tipoTransporte      String
  status              StatusProposta @default(PENDENTE)
  criadaEm            DateTime       @default(now())
  atualizadaEm        DateTime       @updatedAt
  residuoId           Int
  empresaProponenteId Int
  empresaReceptoraId  Int
  chatLastSeen        ChatLastSeen[]
  chatMessages        ChatMessage[]  @relation("PropostaChatMessages")
  notificacoes        Notificacoes[]
  empresaProponente   Empresas       @relation("EmpresaProponente", fields: [empresaProponenteId], references: [id])
  empresaReceptora    Empresas       @relation("EmpresaReceptora", fields: [empresaReceptoraId], references: [id])
  residuo             Residuos       @relation(fields: [residuoId], references: [id], onDelete: Cascade)

  @@map("propostas")
}

model ChatMessage {
  id        Int       @id @default(autoincrement())
  matchId   Int
  senderId  Int
  content   String
  timestamp DateTime  @default(now())
  match     Propostas @relation("PropostaChatMessages", fields: [matchId], references: [id], onDelete: Cascade)
  sender    Empresas  @relation("EmpresaChatMessages", fields: [senderId], references: [id])

  @@map("chat_messages")
}

model Notificacoes {
  id          Int             @id @default(autoincrement())
  tipo        TipoNotificacao
  titulo      String
  mensagem    String
  visualizada Boolean         @default(false)
  criadaEm    DateTime        @default(now())
  empresaId   Int
  propostaId  Int?
  empresa     Empresas        @relation(fields: [empresaId], references: [id])
  proposta    Propostas?      @relation(fields: [propostaId], references: [id], onDelete: Cascade)

  @@map("notificacoes")
}

model ChatLastSeen {
  id                Int       @id @default(autoincrement())
  matchId           Int
  empresaId         Int
  lastSeenMessageId Int
  updatedAt         DateTime  @updatedAt
  empresa           Empresas  @relation(fields: [empresaId], references: [id], onDelete: Cascade)
  match             Propostas @relation(fields: [matchId], references: [id], onDelete: Cascade)

  @@unique([matchId, empresaId])
  @@map("chat_last_seen")
}

enum StatusProposta {
  PENDENTE
  ACEITA
  CANCELADA
}

enum TipoNotificacao {
  NOVA_PROPOSTA
  PROPOSTA_ACEITA
  PROPOSTA_REJEITADA
  MATCH_CONFIRMADO
}
